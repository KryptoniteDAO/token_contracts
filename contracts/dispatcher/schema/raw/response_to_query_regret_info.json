{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RegretInfoResponse",
  "type": "object",
  "required": [
    "info"
  ],
  "properties": {
    "info": {
      "$ref": "#/definitions/RegretInfo"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "RegretInfo": {
      "type": "object",
      "required": [
        "last_claimed_period",
        "per_lock_amount",
        "total_claimed_lock_amount",
        "total_claimed_unlock_amount",
        "total_lock_amount",
        "total_unlock_amount"
      ],
      "properties": {
        "last_claimed_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "per_lock_amount": {
          "$ref": "#/definitions/Uint256"
        },
        "total_claimed_lock_amount": {
          "$ref": "#/definitions/Uint256"
        },
        "total_claimed_unlock_amount": {
          "$ref": "#/definitions/Uint256"
        },
        "total_lock_amount": {
          "$ref": "#/definitions/Uint256"
        },
        "total_unlock_amount": {
          "$ref": "#/definitions/Uint256"
        }
      }
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    }
  }
}
